//---------------------------------------------------------------------------

#include <fmx.h>
#include <fstream>
#include <string>
#include <vector>
#include <sstream>
#pragma hdrstop

#include "RegistrationForm.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.fmx"
TMyRegistrationForm *MyRegistrationForm;
//---------------------------------------------------------------------------
__fastcall TMyRegistrationForm::TMyRegistrationForm(TComponent* Owner)
	: TForm(Owner)
{
}
//---------------------------------------------------------------------------

const char* convertToCharPtr(AnsiString ansiStr)
{
	return ansiStr.c_str() ;
}
bool checkTextEmpty(AnsiString name, AnsiString email, AnsiString username,
					AnsiString password, AnsiString passwordConfirm)
{
	bool textEmpty = std::strcmp(convertToCharPtr(name), "") == 0 ||
					 std::strcmp(convertToCharPtr(email), "") == 0 ||
					 std::strcmp(convertToCharPtr(username), "") == 0 ||
					 std::strcmp(convertToCharPtr(password), "") == 0 ||
					 std::strcmp(convertToCharPtr(passwordConfirm), "") == 0 ;

	return textEmpty ;
}

bool checkStringSize(AnsiString string) {
	if (string.Length() > 20 || string.Length() < 8) {
		return true ;
	}
	else {
		return false ;
    }
}

std::vector<std::string> parseCommaDelimitedString(std::string line) {
	std::vector<std::string> result ;
	std::stringstream s_stream(line) ;

	while(s_stream.good()) {
		std::string substr ;
		getline(s_stream, substr, ',') ;
		result.push_back(substr) ;
	}
	return result ;
}

bool checkUsernameAvailable(AnsiString usernameNew) {
	bool usernameFound = false;

    fstream myFile ;
	myFile.open("registeredUsers.txt", ios::in) ;

	if (myFile.is_open()) {
		std::string line ;

		while (getline(myFile,line) && !usernameFound) {
			std::vector<std::string> parsedLine = parseCommaDelimitedString(line) ;
			const char* username = parsedLine.at(2).c_str() ;

			// AnsiString editUsername = usernameEdit->Text ;
			// const char* usernameString = editUsername.c_str() ;

			if (std::strcmp(convertToCharPtr(usernameNew), username) == 0) {

				usernameFound = true ;

			}

		}

		myFile.close() ;
	}

	return usernameFound ;
}

void __fastcall TMyRegistrationForm::SaveButtonClick(TObject *Sender)
{
	fstream myFile ;
	myFile.open("registeredUsers.txt", ios::app) ;

    AnsiString name = nameEdit->Text ;
	AnsiString email = emailEdit->Text ;
	AnsiString username = usernameEdit->Text ;
	AnsiString password = passwordEdit->Text ;
	AnsiString passwordConfirm = passwordConfirmEdit->Text ;

	if (checkTextEmpty(name, email, username, password, passwordConfirm)) {
		messageLabel->Text = "Please fill out all forms before continuing." ;
	}
	else if (checkStringSize(name)) {
		messageLabel->Text = "Username must be 8 to 20 characters long." ;
	}
	else if (checkUsernameAvailable(name)) {
		messageLabel->Text = "Username already in use." ;
	}
	else if (checkStringSize(password)) {
		messageLabel->Text = "Password must be 8 to 20 characters long." ;
	}
	else if (std::strcmp(convertToCharPtr(passwordEdit->Text), convertToCharPtr(passwordConfirmEdit->Text)) != 0) {
		messageLabel->Text = "Passwords do not match. Please reenter and try again." ;
	}
	else {
		if (myFile.is_open()) {
			myFile << name << "," << email << "," << username << "," << password << "\n" ;
			myFile.close() ;
			messageLabel->Text = "User registered successfully!." ;

			Close() ;
		}
	}

	myFile.close() ;
}
//---------------------------------------------------------------------------

